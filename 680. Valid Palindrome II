class Solution {
    public boolean validPalindrome(String s) {
        int length = s.length();
        
        boolean used = false;
        int i = 0;
        while (i < length/2 ) {
            if(s.charAt(i) == s.charAt(length-1-i)){
                i++; 
                continue;
            } else if (!used) {
                // i must be bigger or equal to one
                if (s.charAt(i) == s.charAt(length-1-i-1)) {
                    used = true;
                    i = i+1;
                    length = length -1;
                    continue;
                } else if (s.charAt(i+1) == s.charAt(length-1-i) ){ 
                    used = true;
                    i = i+2;
                    length = length -1;
                    continue;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }
        return true;
    }
}

class Solution {
    public boolean isPalindromeRange(String s, int i, int j) {
        for (int k = i; k <= i + (j - i) / 2; k++) {
            if (s.charAt(k) != s.charAt(j - k + i)) return false;
        }
        return true;
    }
    public boolean validPalindrome(String s) {
        for (int i = 0; i < s.length() / 2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {
                int j = s.length() - 1 - i;
                return (isPalindromeRange(s, i+1, j) ||
                        isPalindromeRange(s, i, j-1));
            }
        }
        return true;
    }
}
