/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> res = new ArrayList<List<Integer>>(); // use ArrayList
        
        Queue<TreeNode>levelOrderQueue = new LinkedList<>();
        if (root != null) levelOrderQueue.add(root); // corner case when input is "[]"
        
        while (!levelOrderQueue.isEmpty()) {
            int curlevelLength = levelOrderQueue.size();
            List<Integer> curlevel = new ArrayList<>();
            
            for (int i = 0 ; i < curlevelLength; i++) {
                
                TreeNode node = levelOrderQueue.poll();
                curlevel.add(node.val);
                if (node.left != null) {
                    levelOrderQueue.add(node.left);
                }
                if (node.right != null) {
                    levelOrderQueue.add(node.right);
                }
            }
            res.add(curlevel);
        }
        return res;
    }
}

/*
Time complexity : \mathcal{O}(N)O(N) since each node is processed exactly once.

Space complexity : \mathcal{O}(N)O(N) to keep the output structure which contains N node values. 
*/
