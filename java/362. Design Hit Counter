// hit: keep insert each record to the queue by its timestamp
// getHits: keep remove the record which exceed the 300 minutes time window
// caveat: if hit rate is very hit, getHit performance will be very bad, because it needs to remove all out of dated record first.

class HitCounter {

    /** Initialize your data structure here. */
    public HitCounter() {
        record = new LinkedList();
    }
    
    /** Record a hit.
        @param timestamp - The current timestamp (in seconds granularity). */
    public void hit(int timestamp) {
        record.add(timestamp);
    }
    
    /** Return the number of hits in the past 5 minutes.
        @param timestamp - The current timestamp (in seconds granularity). */
    public int getHits(int timestamp) {
        while(record.size() > 0 && timestamp - record.peek() >= 300 ){
            record.remove();
        }
        return record.size();
        
    }
    Queue<Integer> record;
}

/**
 * Your HitCounter object will be instantiated and called as such:
 * HitCounter obj = new HitCounter();
 * obj.hit(timestamp);
 * int param_2 = obj.getHits(timestamp);
 */
 
 
 
// method 2 when too many hits in a second
 
 
 public class HitCounter {
    int hits[];
    int timestamps[];
 
    /** Initialize your data structure here. */
    public HitCounter() {
        hits = new int[300];
        timestamps = new int[300];
    }
 

    public void hit(int timestamp) {
        int index = timestamp % 300;
        if (timestamps[index] != timestamp) {
            timestamps[index] = timestamp;
            hits[index] = 1;
        } else {
            hits[index]++;
        }
    }
 
   
    public int getHits(int timestamp) {
        int res = 0;
        for (int i = 0; i < 300; i++) {
            if(timestamp - timestamps[i] < 300) {
                res += hits[i];
            } 
        }
        return res;
    }
 }
 
