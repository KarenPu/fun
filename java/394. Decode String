class Solution {
    public String decodeString(String s) {
        StringBuilder sb = new StringBuilder();
        Stack<String> res = new Stack<>();
        Stack<Integer> number = new Stack<>();
        
        int length = s.length();
        int freq = 0;
        String current= "";

        for (int i = 0; i < length; i++) {
            char c = s.charAt(i);
            if (isNumber(c)) {
                freq = freq * 10; 
                freq += c - '0';
            } else if (isChar(c)) {
                current += c;
            } else if (c == '[') {
                number.add(freq);
                freq = 0;
                res.add(current);
                current = "";
            } else if (c == ']') {
                String currentWithFreq = "";
                for (int j = 0; j < number.peek(); j++){
                    currentWithFreq += current;                
                }
                number.pop();
                current = res.peek() + currentWithFreq;
                res.pop();
            }
        }
        
        return res.isEmpty()? current : res.peek();
    }
    
    private static boolean isNumber (char c) {
        if (c >= '0'  && c <='9') {
            return true;
        } 
        return false;
    }
    private static boolean isChar (char c) {
        if (c >= 'a'  && c <='z' || c >= 'A'  && c <='Z') {
            return true; 
        }
        return false;
    }
    
}

/*
我们也可以用迭代的方法写出来，当然需要用 stack 来辅助运算，我们用两个 stack，一个用来保存个数，一个用来保存字符串，我们遍历输入字符串，如果遇到数字，我们更新计数变量 cnt；如果遇到左括号，我们把当前 cnt 压入数字栈中，把当前t压入字符串栈中；如果遇到右括号时，我们取出数字栈中顶元素，
存入变量k，然后给字符串栈的顶元素循环加上k个t字符串，然后取出顶元素存入字符串t中；如果遇到字母，我们直接加入字符串t中即可，参见代码如下*/
