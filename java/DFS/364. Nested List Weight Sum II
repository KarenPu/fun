/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
 
// keep a list and keep updating values for each level
// sum it up

class Solution {
    public int depthSumInverse(List<NestedInteger> nestedList) {
        List<Integer> res = new LinkedList<>();
        int sum = 0;
        internal(nestedList, res, 0);
        // the deepest is the last
        int j = 1;
        for (int i = res.size() -1; i >= 0 ; i--) {
            sum += res.get(i) * j;
            j++;
        }
        return sum;
    }
    
    private void internal(List<NestedInteger> nestedList, final List<Integer> res, int level) {
        if (res.size() <= level) res.add(0); // important the level needs to be there
        
        for (NestedInteger n: nestedList) {
            if (n.isInteger()) { 
                int newValue = res.get(level) + n.getInteger();
                res.set(level, newValue);
            } else {
                internal(n.getList(), res, level +1);
            }
        }    
    }
}
