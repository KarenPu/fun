// Complexity O(N*N)
// Recursively check if in-comming character can be found in the following 4 directions
// Mark and unMark if the position has been visited or not.


class Solution {
    public boolean exist(char[][] board, String word) {
        //edge case input is null or empty
        if (board == null || board.length == 0) return false;
        if (word == null || word.length() == 0) return false;
        
        int row = board.length;
        int col = board[0].length;


         for (int i = 0 ; i < row ; i++) {
             for (int j = 0; j < col ; j++) {
                 if (board[i][j] == word.charAt(0)) {
                     if(internalExist(board, i, j, 0, word)) {
                         return true;
                     }
                 }
             }
         }
         return false;
    }
    
    //recursively find if a word exist.
    private boolean internalExist(char[][]board, int i, int j, int index, String word) {
        int row = board.length;
        int col = board[0].length;
        int total = word.length();
    
        // edge check
        if (i < 0 || i >= row || j < 0 || j >= col || index >= total) {
            return false;
        }
        
        // if current index matched
        if (word.charAt(index) == board[i][j]) {
            //in - place mark it is been visited.
            char tmp =  board[i][j];
            board[i][j] = '*';
             if (index == total -1) {
                 return true;
             } else {
                 // verify next four direction
                 boolean res = (internalExist(board, i -1 , j, index + 1, word) 
                         || internalExist(board, i +1 , j, index + 1, word)
                            || internalExist(board, i , j-1, index + 1, word)
                            || internalExist(board, i , j +1, index + 1, word));                                        board[i][j] = tmp;
                 return res;
             }
        }
        
        // if not match
        return false;
    }
}
