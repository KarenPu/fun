Time Complexity: O(N \log N)O(NlogN), where NN is the length of points.

Space Complexity: O(N)O(N). 

class Solution {
    public int[][] kClosest(int[][] points, int K) {
        if (points.length == 0) {
            return points;
        }
        
        // create min heap
        PriorityQueue<Point> queue = new PriorityQueue<Point>(K, 
            new Comparator<Point>() {
                public int compare(Point a, Point b) {
                return a.x * a.x + a.y * a.y - b.x * b.x - b.y * b.y;
            }
        });
       
        // pre process data 
        for (int i = 0; i < points.length; i++) {
            Point point = new Point(points[i][0], points[i][1]);
            queue.add(point);
        }
        
        int total = Math.min(K, points.length); 
        int[][] res = new int[K][2];

        for (int i = 0; i < K; i++) {
            Point point = queue.poll();
            res[i][0] = point.x;
            res[i][1] = point.y;
        }
        return res;
    }
    
    
    class Point {
        int x;
        int y;
        Point(final int x, final int y) {
            this.x = x;
            this.y = y;
        }
    }
}
