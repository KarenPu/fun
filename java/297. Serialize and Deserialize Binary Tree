/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        return serializa_internal(root, "");
    }

    private String serializa_internal(TreeNode root, String s) {
        if (root == null) {
            s += "null,";
            return s;
        } 
        s += s.valueOf(root.val) + ",";
        s = serializa_internal(root.left, s);
        s = serializa_internal(root.right, s);
        return s;
    }

    private TreeNode deserialze_internal(List<String> values) {
        
        if (values.get(0).equals("null")) {
            values.remove(0);
            return null;
        }
        // none null but integer value
        String val = values.remove(0);
        TreeNode node = new TreeNode(Integer.valueOf(val));
        node.left = deserialze_internal(values);
        node.right = deserialze_internal(values);

        return node;
    }
    
    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] values =  data.split(",");
        List <String> allValues = new ArrayList<String>(Arrays.asList(values));
        return deserialze_internal(allValues);
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
