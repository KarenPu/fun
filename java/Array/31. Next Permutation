// Time O(n)
// Space O(1)
// Reversely find the 1st decreased value. say index i
// Revserly find the one just bigger than that value bewteen[length - 1 , i +1]
// sawp those two posistion
// after swap [i+1, length-1] is decreasing, so swap the hole section, make it increasing

public class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0) {
            if (i >= 0 && nums[i+1] > nums[i] ) {
                break;
            }
            i--;
        }
        // if find decreasing node, find the one just bigger than it.
        if (i >= 0) {
            int j = nums.length - 1;
            // since [length-1, i+1] are increasing
            while (j >= i + 1 && nums[j] <= nums[i] ) {
                j--;
            }
            swap(nums, i , j);
        }
        
        //reverse [i+1, length] portion
        reverse(nums, i+1);
    }
     
    void swap(int[] nums, int i, int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }

    void reverse(int[] nums, int start) {
        int i = start; int j = nums.length-1;
        while(i<j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }
}
    
