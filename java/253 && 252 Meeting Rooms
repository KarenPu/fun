253. Meeting Rooms II
class Solution {
    public int minMeetingRooms(int[][] interval) {
        //sanity check
        int length = interval.length;
        if (length == 0) return 0;
                
        // pre-process the input, since we need to sort by start time
        Interval[] intervals = new Interval[length];
        for (int i = 0 ; i < length; i ++) {
            intervals[i] = new Interval(interval[i][0],interval[i][1]);
        }
        
        // sort by start time
        Arrays.sort(intervals, new Comparator<Interval>() {
            public int compare(Interval a , Interval b) {
                return a.start - b.start;
            }
        });
    
        // min heap, with size length
        PriorityQueue<Integer> allocator = new PriorityQueue<Integer>(
                                    length, new Comparator<Integer>() {
                                        public int compare (Integer a , Integer b) {
                                            return a - b;
                                        }
                                    });
        // push sorted intervals to the min heap
        allocator.add(intervals[0].end);
    
        // if min heap , remember replace or add one at a time, can not keep poping
        // Think it from the meeting room perspective
        for (int i = 1; i < length; i ++) {
            
            if (intervals[i].start >= allocator.peek()) {
                allocator.poll();
            } 
            allocator.add(intervals[i].end);
            
        }
    
        return allocator.size();

    }
    
    public class Interval {
        public int start;
        public int end;
        
        Interval(final int start, final int end) {
            this.start = start;
            this.end = end;
        }
    }
}

Complexity Analysis

Time Complexity: O(N\log N)O(NlogN).

Algorithm

Sort the given meetings by their start time.
Initialize a new min-heap and add the first meeting's ending time to the heap. We simply need to keep track of the ending times as that tells us when a meeting room will get free.
For every meeting room check if the minimum element of the heap i.e. the room at the top of the heap is free or not.
If the room is free, then we extract the topmost element and add it back with the ending time of the current meeting we are processing.
If not, then we allocate a new room and add it to the heap.
After processing all the meetings, the size of the heap will tell us the number of rooms allocated. This will be the minimum number of rooms needed to accommodate all the meetings.
Let us not look at the implementation for this algorithm.

There are two major portions that take up time here. One is sorting of the array that takes O(N\log N)O(NlogN) considering that the array consists of NN elements.
Then we have the min-heap. In the worst case, all NN meetings will collide with each other. In any case we have NN add operations on the heap. In the worst case we will have NN extract-min operations as well. Overall complexity being (NlogN)(NlogN) since extract-min operation on a heap takes O(\log N)O(logN).
Space Complexity: O(N)O(N) because we construct the min-heap and that can contain NN elements in the worst case as described above in the time complexity section. Hence, the space complexity is O(N)O(N). 


252. Meeting Rooms

class Solution {
    public boolean canAttendMeetings(int[][] intervals) {
        // The whole idea is to check if any meetings has overlapped.
        // If so return immediately
        
        int length = intervals.length;
        if (length == 0) return true;
        
        // pre-processing the data
        Interval[] intervalWithStartAndEnd = new Interval[length];
        for (int i = 0; i < length; i++) {
            intervalWithStartAndEnd[i] =  new Interval(intervals[i][0], intervals[i][1]);
        }
        
        //sort array based on the start time;
        Arrays.sort(intervalWithStartAndEnd, new Comparator<Interval>() {
            public int compare(final Interval a , final Interval b) {
                return a.start - b.start;
            }
        }); 
        int lastEnd = 0;
        for (int i = 0; i < length; i++) {
            if (intervalWithStartAndEnd[i].start < lastEnd) {
                return false;
            }
            lastEnd = intervalWithStartAndEnd[i].end;
        }
        
        return true;
        
    }
    
    public class Interval {
        int start;
        int end;
        
        Interval (final int start, final int end) {
            this.start = start;
            this.end = end;
        }
    }
}

Complexity Analysis

Time complexity : O(n \log n)O(nlogn). The time complexity is dominated by sorting. Once the array has been sorted, only O(n)O(n) time is taken to go through the array and determine if there is any overlap.

Space complexity : O(1)O(1). Since no additional space is allocated.
