// Time popMax is O(n) other operations are O(1)
// Space O(n)

class MaxStack {
    Stack<Integer> stack;
    Stack<Integer> maxStack;
    /** initialize your data structure here. */
    public MaxStack() {
        stack = new Stack<>();
        maxStack = new Stack<>();
    }
    
    public void push(int x) {
        int max = x;
        if (!maxStack.isEmpty()) {
            max = maxStack.peek();
        }
        max = Math.max(x, max);
        stack.push(x);
        maxStack.push(max);
    }
    
    public int pop() {
        maxStack.pop();
        return stack.pop();
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int peekMax() {
        return maxStack.peek();
    }
    
    public int popMax() {
        int max = maxStack.peek();
        Stack<Integer> tmp = new Stack<>();
        while(top() != max) tmp.push(pop());
        pop();
        while(!tmp.isEmpty()) push(tmp.pop());
        return max;
    }
}
