/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1 = new Stack<>();
        Stack<Integer> s2 = new Stack<>();
        
        while(l1 != null) {
            s1.push(l1.val);
            l1 = l1.next;
        }
                
        while(l2 != null) {
            s2.push(l2.val);
            l2 = l2.next;
        }
        
        ListNode current = new ListNode(-1);
        int sum = 0;
        int carry = 0;
    
        while(!s1.isEmpty() && !s2.isEmpty()) {
            int ss1 = s1.pop();
            int ss2 = s2.pop();
            sum = (ss1 + ss2 + carry)%10;
            carry = (ss1 + ss2 + carry)/10;
            ListNode now = new ListNode(sum);
            now.next = current.next;
            current.next = now;
        }
        while (!s1.isEmpty()) {
            int ss1 = s1.pop();
            sum = (ss1 + carry) %10;
            carry = (ss1 + carry) /10;
            ListNode now = new ListNode(sum);
            now.next = current.next;
            current.next = now;
        }
    
         while (!s2.isEmpty()) {
            int ss2 = s2.pop();
            sum = (ss2 + carry) %10;
            carry = (ss2 + carry) /10;
            ListNode now = new ListNode(sum);
            now.next = current.next;
            current.next = now;
        }

        if (carry > 0) {
            ListNode now = new ListNode(carry);
            now.next = current.next;
            current.next = now;
        }
        
        return current.next;
    }
}


/*
better format

        ListNode *res = new ListNode(0);
        while (!s1.empty() || !s2.empty()) {
            if (!s1.empty()) {sum += s1.top(); s1.pop();}
            if (!s2.empty()) {sum += s2.top(); s2.pop();}
            res->val = sum % 10;
            ListNode *head = new ListNode(sum / 10);
            head->next = res;
            res = head;
            sum /= 10;
        }
        return res->val == 0 ? res->next : res;
*/
