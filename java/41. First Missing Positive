// Smart
// Requirement O(n)in Complexity O(1) in space
//那么我们只能覆盖原有数组，我们的思路是把1放在数组第一个位置nums[0]，2放在第二个位置nums[1]，即需要把nums[i]放在nums[nums[i] - 1]上，那么我们遍历整个数组，如果nums[i] != i + 1, 而nums[i]为整数且不大于n，另外nums[i]不等于nums[nums[i] - 1]的话，我们将两者位置调换，如果不满足上述条件直接跳过，最后我们再遍历一遍数组，如果对应位置上的数不正确则返回正确的数，代码如下：A
class Solution {
    public int firstMissingPositive(int[] nums) {
        //inplace check if nums[i] != i print the index
        // drop all none negative and zeros
        int length = nums.length;
        for (int i = 0; i< length; i++) {
            int index = nums[i];
            if (index > 0 && index < length && nums[index-1] != index ) {
                int tmp = nums[index-1];
                nums[index-1] = index;
                nums[i] = tmp;
                nums[index] = tmp;
            }
        }
        // interate through the length of the list
        
         for (int i = 0; i< length; i++) {
             if (nums[i] != i+1) {
                 return i+1;
             }
         }
         return length + 1 ;
    }
}
