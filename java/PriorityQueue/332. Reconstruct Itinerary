
// PriorityQueue sort by alphabit by default
// Use BFS keep a stack of next level of destination,
// Eulerian path only end/start node has odd number of degree(I don't think it is related)

// First keep going forward until you get stuck.  means no more degree from a node
// That's a good main path already. Remaining tickets form cycles which are found on the way back and get merged into that main path. 
// By writing down the path backwards when retreating from recursion, merging the cycles into the main path is easy - 
// the end part of the path has already been written, the start part of the path hasn't been written yet, 
// so just write down the cycle now and then keep backwards-writing the path.
/*
Also it should help to see how targets is updating at each step, e.g.,

targets = {'JFK': ['D', 'A'], 'A': ['C'], 'B': ['C'], 'C': ['JFK', 'D'], 'D': ['B', 'A']}
route = []
stack = ['JFK']
First point at which we get stuck:

targets = {'JFK': ['D'], 'A': [], 'B': ['C'], 'C': ['JFK', 'D'], 'D': ['B']}
route = []
stack = ['JFK', 'A', 'C', 'D', 'A']
Update route:

targets = {'JFK': ['D'], 'A': [], 'B': ['C'], 'C': ['JFK'], 'D': ['B']}
route = ['A']
stack = ['JFK', 'A', 'C', 'D']
Search forward again until stuck:

targets = {'JFK': [], 'A': [], 'B': [], 'C': [], 'D': []}
route = ['A']
stack = ['JFK', 'A', 'C', 'D', 'B', 'C', 'JFK', 'D']
*/

class Solution {
    public List<String> findItinerary(List<List<String>> tickets) {
        Map<String, PriorityQueue<String>> destination = new HashMap<>();
        
        Stack<String> ready = new Stack<>();
        List<String> res = new ArrayList<>();
        
        for (List<String> flight : tickets) {
            destination.computeIfAbsent(
                flight.get(0), k ->new PriorityQueue<>()).offer(flight.get(1));
        }
        
        ready.push("JFK");
        while(!ready.isEmpty()){
            while(destination.containsKey(ready.peek()) && !destination.get(ready.peek()).isEmpty()) {
                ready.push(destination.get(ready.peek()).poll()); 
            }
            res.add(0, ready.pop());
        }
        return res;
    }
}
