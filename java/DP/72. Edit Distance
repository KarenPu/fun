// d[i][j] = min(d[i-1][j], d[i-1][j-1] may plus one, d[i][j-1])
class Solution {
    public int minDistance(String word1, String word2) {
        int len1 = word1.length();
        int len2 = word2.length();
        //d[i][j] means word1.substring(0,j) to word2.substring(0,j)
        int[][] d = new int[len1+1][len2+1];
        
        for (int i = 0 ; i <= len1; i++) {
            d[i][0] = i;
        }
        for (int j = 0 ; j <= len2; j++) {
            d[0][j] = j;
        }
        
        for (int i = 1; i <= len1; i++) {
            for (int j = 1; j <= len2; j++) {
                    int left = d[i - 1][j] + 1;
                    int down = d[i][j - 1] + 1;
                    int left_down = d[i - 1][j - 1];
                if (word1.charAt(i-1) != word2.charAt(j-1)) { // overflow
                    left_down += 1;
                }
               
                d[i][j] = Math.min(left, Math.min(down, left_down));
            }
        }
        return d[len1][len2];
    }
}
