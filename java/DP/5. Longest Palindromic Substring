// Expand Around Center
//Time complexity : O(n^2)
//Space complexity : O(1)O(1)


class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if (n < 2) return s;
        //result
        int start = 0;
        int resLen = 0;
        for (int i = 0 ; i < n; i++) {
            int left = i; int right = i;
            // if i is the middle element
            while (right < n - 1 && left > 0 && s.charAt(right + 1) == s.charAt(left - 1)) {
                ++right; --left;
            }
            
            if(right - left +1 > resLen) {
                start = left;
                resLen = right - left +1;
            }
            
            left = i; right = i+1;
            // if i, i+1 is the middle element
            if (right < n && s.charAt(left) == s.charAt(right) ) {
                while (right < n - 1 && left > 0 && s.charAt(right + 1) == s.charAt(left -1)) {
                    ++right; --left;
                }
            
                if(right - left +1 > resLen) {
                    start = left;
                    resLen = right - left +1;
                }
            }
      
        }
        return s.substring(start, start + resLen);
    }
}
