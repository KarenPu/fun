/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;

    public Node() {}

    public Node(int _val,List<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

// BFS 
class Solution {
    public Node cloneGraph(Node node) {
        Map<Node, Node> map = new HashMap<Node, Node>(); // map for all mapped nodes
        Queue<Node> queue = new LinkedList<Node>();// a queue for nodes with new creation but not yet finished neighbor
                                                   // old nodes!!!!
       
        queue.add(node);
        Node newHead = new Node(node.val, new ArrayList<Node>());
        map.put(node, newHead);
        
        while (!queue.isEmpty()) {
             Node cur = queue.remove();
             List<Node> newNeighbors = map.get(cur).neighbors;
            
             Node newNode = map.get(cur);
             for (Node neighbor: cur.neighbors) {
                if (!map.containsKey(neighbor)) {
                    Node newNeighbor = new Node(neighbor.val, new ArrayList<Node>());
                    map.put(neighbor, newNeighbor);
                    queue.add(neighbor);
                    newNeighbors.add(newNeighbor);
                } else {
                    newNeighbors.add(map.get(neighbor));
                 }
             }
        }
        
        return map.get(node);
        
    }
}
