// keep an array
// keep a map for value and index
// remove trick place the last item at the removed place
// special handling when removed item == last time 

class RandomizedSet {
    ArrayList<Integer> res;
    Map<Integer, Integer> map;
    int size;
    Random rand; 
    /** Initialize your data structure here. */
    public RandomizedSet() {
        res = new ArrayList<Integer>();
        map = new HashMap<Integer, Integer>();
        rand = new Random();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if(map.containsKey(val)) {
            return false; 
        }   
        res.add(val);
        map.put(val, size);
        size = size + 1;
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if(!map.containsKey(val)) {
            return false; 
        }     
        int originalIndex = map.get(val);
        int lastValue = res.get(size -1);
        if(size > 1) {
            res.set(originalIndex, lastValue);
            map.put(lastValue, originalIndex);
        }
        map.remove(val);
        res.remove(size-1);
        size--;

        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        int index = rand.nextInt(size);
        return res.get(index);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */
