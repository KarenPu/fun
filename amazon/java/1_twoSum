1 Two Sum
class Solution {
    public int[] twoSum(int[] nums, int target) {
        //key is the nums value is the index;
        HashMap<Integer, Integer>input = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int residual = target - nums[i];
            if (input.containsKey(residual)) {
                return new int[] {input.get(residual), i}; 
            }
            //if not found, add pair
            input.put(nums[i], i);
        }
        throw new IllegalArgumentException("No solution");
    }
}

167. Two Sum II - Input array is sorted 
Two pointer
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        //two pointer
        int first = 0;
        int second = numbers.length - 1;
        while(second > first) {
            int sum = numbers[first] + numbers[second];
            if (sum < target)  {
                first ++;
            } else if (sum > target) {
                second --;
            } else {
                //matched
                return new int[]{first+1, second+1};
            }   
        }
        return null;
    }
}

15 3Sum
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        //Sort Array
        Arrays.sort(nums);
        List<List<Integer>> res = new LinkedList<>();
        //Two pointer till the 3rd last
        for (int i = 0; i < nums.length -2; i++) {
            if (i == 0 || (i > 0 && nums[i] != nums[i-1])) {
                //skip dup
                int target = 0 - nums[i];
                int first = i+1;
                int second = nums.length - 1;
                while (second > first) {
                    if (nums[first] + nums[second] == target) {
                        res.add(Arrays.asList(nums[i], nums[first], nums[second]));
                        first++;
                        second--;
                        while (first < second && nums[first] == nums[first + 1]) first++;
                        while (first < second && nums[second] == nums[second - 1]) second--;
                    } else if (nums[first] + nums[second] > target) {
                        second--;
                    } else {
                        first++;
                    }
                }
            }
        }
        return res;
    }
}
