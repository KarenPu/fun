class Solution {
    public int numIslands(char[][] grid) {
        int res = 0;
        int xlimit = grid.length;
        if (xlimit == 0) {
            return 0;
        }
        int ylimit = grid[0].length;
        
        //System.out.println("xlimit =" + xlimit + ", ylimit =" + ylimit);
        
        for (int i = 0 ; i < xlimit; i++) {
            for (int j = 0; j < ylimit; j++) {
                if (grid[i][j] == '1') {
                    res++;
                    numIslandsInternal(grid, i, j); 
                }
            }
        }
        return res;
    }
    
    //dfs
    private void numIslandsInternal(char[][] grid, int i, int j) {
        int xlimit = grid.length;
        if (xlimit == 0) return;
        int ylimit = grid[0].length;
        
        //edge
        if (i < 0 || i >= xlimit  || j < 0  || j >= ylimit) {
            return;
        }
        // prune
        if (grid[i][j] == '0') return;
        
        if (grid[i][j] == '1') {
            grid[i][j] = '0';
            numIslandsInternal(grid, i+1, j); 
            numIslandsInternal(grid, i-1, j);   
            numIslandsInternal(grid, i, j+1); 
            numIslandsInternal(grid, i, j-1);
        }        
        
    }

}
